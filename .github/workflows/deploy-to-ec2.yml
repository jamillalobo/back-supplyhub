name: CI/CD Spring Boot and PostgreSQL to AWS EC2

on:
  push:
    branches:
      - main

env:
  JAVA_VERSION: '17'
  ECR_REPOSITORY_NAME: 'supplyhub-repo'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Spring Boot application with Maven
        run: mvn clean install -DskipTests

      - name: Get JAR file name
        id: get_jar_name
        run: echo "JAR_FILE_NAME=$(find target -name "*.jar" -print -quit | xargs basename)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Constrói a imagem Docker da sua aplicação usando o Dockerfile na raiz
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Envia a imagem para o ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Conectado à instância EC2: ${{ secrets.EC2_HOST }}"
            echo "Preparando ambiente Docker..."

            NETWORK_NAME="my-supplyhub-network"
            DB_CONTAINER_NAME="my-postgres-db"
            DB_IMAGE="postgres:13-alpine"
            DB_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
            DB_USER="supplyhub"
            DB_NAME="supplyhubdb"

            APP_CONTAINER_NAME="spring-boot-app-container"
            APP_IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest"
            APP_PORT_INTERNAL="8080"
            APP_PORT_HOST="80"

            # --- Operações com a rede Docker ---
            if ! sudo docker network ls | grep -q "$NETWORK_NAME"; then
              echo "Criando rede Docker: $NETWORK_NAME"
              sudo docker network create $NETWORK_NAME
            fi

            # --- Operações com o container do Banco de Dados ---
            echo "Parando e removendo container antigo do banco, se existir..."
            if sudo docker ps -a --filter "name=$DB_CONTAINER_NAME" --format "{{.ID}}" | grep -q .; then
              sudo docker stop $DB_CONTAINER_NAME
              sudo docker rm $DB_CONTAINER_NAME
            fi

            echo "Puxando imagem do PostgreSQL..."
            sudo docker pull $DB_IMAGE

            echo "Rodando novo container do banco..."
            sudo docker run -d \
              --name $DB_CONTAINER_NAME \
              --network $NETWORK_NAME \
              -e POSTGRES_DB=$DB_NAME \
              -e POSTGRES_USER=$DB_USER \
              -e POSTGRES_PASSWORD=$DB_PASSWORD \
              -p 5432:5432 \
              $DB_IMAGE

            echo "Aguardando banco inicializar..."
            sleep 10 # Reduzi o tempo inicial para verificar mais rápido

            # --- Operações com o container da Aplicação Spring Boot ---
            echo "Parando e removendo container antigo da aplicação, se existir..."
            if sudo docker ps -a --filter "name=$APP_CONTAINER_NAME" --format "{{.ID}}" | grep -q .; then
              sudo docker stop $APP_CONTAINER_NAME
              sudo docker rm $APP_CONTAINER_NAME
            fi

            echo "Puxando nova imagem Docker da aplicação Spring Boot..."
            sudo docker pull $APP_IMAGE_URI

            echo "Subindo nova aplicação com imagem atualizada..."
            SPRING_DATASOURCE_URL_VALUE="jdbc:postgresql://${DB_CONTAINER_NAME}:5432/${DB_NAME}"

            sudo docker run --pull always -d \
              --name $APP_CONTAINER_NAME \
              --network $NETWORK_NAME \
              -p $APP_PORT_HOST:$APP_PORT_INTERNAL \
              -e SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL_VALUE \
              -e SPRING_DATASOURCE_USERNAME=$DB_USER \
              -e SPRING_DATASOURCE_PASSWORD=$DB_PASSWORD \
            $APP_IMAGE_URI

            echo "Limpeza de imagens Docker não utilizadas..."
            sudo docker system prune -f